#!/usr/bin/python3

import json
from os import listdir
import os.path
import re
import subprocess
import sys
import time
import yaml


def cmd(command):
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout = result.stdout.decode('utf-8').rstrip("\n")
    stderr = result.stderr.decode('utf-8').rstrip("\n")
    if result.returncode != 0:
        raise Exception("Command returned code {}".format(result.returncode))
    return stdout


scriptpath = sys.argv.pop(0)
scripts_dir = os.path.abspath(os.path.dirname(scriptpath)) + "/status.d"

# Config
colours = {}
levels = []
config_file = os.path.abspath(os.path.dirname(scriptpath)) + "/status.yml"
if os.path.exists(config_file):
    with open(config_file, 'r') as fh:
        config = yaml.load(fh, Loader=yaml.CLoader)
        for level in config['levels']:
            level_key = list(level.keys())[0]
            levels.append(level_key)
            colours[level_key] = (level[level_key]['background'], level[level_key]['foreground'])

message_regex = re.compile(r'([^|]*)\|([^|]*)\|(.*)')

while True:

    messages = []

    # Search for scripts and execute them
    files = [f for f in listdir(scripts_dir) if os.path.isfile(os.path.join(scripts_dir, f))]
    for file in files:
        try:
            results = cmd(os.path.join(scripts_dir, file))
            for result in results.split("\n"):
                if result == "":
                    continue
                match = message_regex.match(result)
                if not match:
                    messages.append({
                        'level': 'error', 
                        'label': '', 
                        'text': "Status script {} returned malformed line: '{}'".format(file, result)
                        })
                else:
                    messages.append({
                        'level': match.group(1), 
                        'label': match.group(2), 
                        'text': match.group(3)})
        except Exception:
            messages.append({
                'level': 'error', 
                'label': '', 
                'text': "Error running status script {}".format(file)})

    # Output messages found
    if len(messages) > 0:

        # Set tooltip text to a vertical list of all messages
        tooltip = "\n".join(["[{}] {}".format(m['label'], m['text']) for m in messages])

        # For toolbar text, compact down multiple messages from the same label
        # to a single message with just the number of messages
        for label in set([m['label'] for m in messages if m['label'] != '']):
            label_messages = [m for m in messages if m['label'] == label]
            label_level = levels[max([levels.index(m['level']) for m in label_messages])]
            if len(label_messages) > 1:
                count = len(label_messages)
                messages = [m for m in messages if m['label'] != label]
                messages.append({
                    'level': label_level, 
                    'label': label, 
                    'text': "({})".format(count)
                })

        # Set toolbar text to a horizontol list of all messages, coloured according
        # to the message level
        text = " ".join([
            "<span background=\"{0}\" foreground=\"{1}\"> {2}{3} </span>".format(
                colours[m['level']][0], 
                colours[m['level']][1], 
                ("[{}] ".format(m['label']) if m['label'] != '' else ''),
                m['text']
            ) for m in messages])

        # Output data to Waybar
        print(json.dumps({
            'text': text,
            'tooltip': tooltip
            }), flush=True)

    else:
        print('', flush=True)
    
    time.sleep(30)
