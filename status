#!/usr/bin/python3

import json
from os import listdir
import os.path
import re
import subprocess
import sys
import time


def cmd(command):
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout = result.stdout.decode('utf-8').rstrip("\n")
    stderr = result.stderr.decode('utf-8').rstrip("\n")
    if result.returncode != 0:
        raise Exception("Command returned code {}".format(result.returncode))
    return stdout


scriptpath = sys.argv.pop(0)
scripts_dir = os.path.abspath(os.path.dirname(scriptpath)) + "/status.d"

# Message colours: background, foreground
colours = {
    'error': ('440000', 'ff0000'),
    'info': ('004400', '00ff00'),
}

message_regex = re.compile(r'([^|]*)\|([^|]*)\|(.*)')

while True:

    messages = []

    # Search for scripts and execute them
    files = [f for f in listdir(scripts_dir) if os.path.isfile(os.path.join(scripts_dir, f))]
    for file in files:
        try:
            results = cmd(os.path.join(scripts_dir, file))
            for result in results.split("\n"):
                if result == "":
                    continue
                match = message_regex.match(result)
                if not match:
                    messages.append({
                        'type': 'error', 
                        'label': '', 
                        'text': "Status script {} returned malformed line: '{}'".format(file, result)
                        })
                else:
                    messages.append({
                        'type': match.group(1), 
                        'label': match.group(2), 
                        'text': match.group(3)})
        except Exception:
            messages.append({
                'type': 'error', 
                'label': '', 
                'text': "Error running status script {}".format(file)})

    # Output messages found
    if len(messages) > 0:
        tooltip = "\n".join(["[{}] {}".format(m['label'], m['text']) for m in messages])
        text = " ".join([
            "<span background=\"#{0}\" foreground=\"#{1}\"> {2}{3} </span>".format(
                colours[m['type']][0], 
                colours[m['type']][1], 
                ("[{}] ".format(m['label']) if m['label'] != '' else ''),
                m['text']
            ) for m in messages])
        print(json.dumps({
            'text': text,
            'tooltip': tooltip
            }), flush=True)
    else:
        print('', flush=True)
    
    time.sleep(30)
